name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-v2-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-v2-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-v2-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests (excluding vault)
      run: |
        cargo test --all-features -p uranium-core
        cargo test --all-features -p uranium-cli
      
    - name: Run tests (release mode, excluding vault)
      run: |
        cargo test --release --all-features -p uranium-core
        cargo test --release --all-features -p uranium-cli

  lint:
    name: Lints
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-v2-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: |
        cargo fmt -p uranium-core -- --check
        cargo fmt -p uranium-cli -- --check
        cargo fmt -p uranium-vault -- --check
    
    - name: Run clippy (excluding vault)
      run: |
        cargo clippy --lib --tests --all-features -p uranium-core -- -D warnings -A clippy::unused-unit -A clippy::uninlined-format-args
        cargo clippy --bins --all-features -p uranium-cli -- -D warnings -A clippy::unused-unit -A clippy::uninlined-format-args

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-v2-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-v2-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build (excluding vault)
      run: |
        cargo build --release --all-features -p uranium-core
        cargo build --release --all-features -p uranium-cli
    
    - name: Build examples
      run: |
        cargo build --release -p uranium-core --example simple_demo
        cargo build --release -p uranium-core --example keychain_demo
        cargo build --release -p uranium-core --example full_demo

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      uses: rustsec/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}